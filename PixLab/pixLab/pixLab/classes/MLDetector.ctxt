#BlueJ class context
comment0.target=MLDetector
comment0.text=\r\n\ This\ class\ uses\ machine\ learning\ techniques\ to\ determine\ the\ binary\ classification\ of\r\n\ an\ image.\ The\ following\ categories\ that\ this\ program\ is\ able\ to\ classify\ are\ below\:\r\n\ \r\n\ a)\ Written\ zeros\ and\ ones\r\n\ \r\n\ The\ ML\ algorithm\ used\ falls\ most\ closely\ under\ SVM\ (Support\ Vector\ Machines).\ However,\r\n\ unlike\ a\ regular\ SVM\ ML\ application,\ this\ algorithm\ has\ been\ stripped\ of\ most\ statistics\r\n\ and\ calculus\ (including\ typical\ linear\ regression\ techniques)\ in\ order\ for\ the\ program\ to\r\n\ be\ more\ easily\ understood\ by\ high\ school\ students.\r\n\ \r\n\ This\ program\ uses\ a\ series\ of\ features\ to\ grab\ data\ from\ images,\ and\ then\ averages\ those\r\n\ feature\ data\ to\ determine\ whether\ the\ image\ is\ of\ one\ category\ or\ another.\ The\ feature\ list\r\n\ can\ be\ amended,\ appended,\ or\ truncated,\ which\ may\ yield\ better\ or\ worse\ results\ over\ the\r\n\ course\ of\ more\ training\ data.\ The\ weights\ of\ these\ features\ are\ saved,\ averaged,\ and\ adjusted\r\n\ after\ each\ training\ data\ image,\ ie\ this\ is\ the\ part\ where\ the\ machine\ 'learns'.\r\n\ \r\n\ Unlike\ some\ weight-adjusting\ ML\ algorithms,\ neither\ forward\ nor-backward\ propogation\ is\ used,\r\n\ but\ rather\ adjusts\ weight\ (inversely)\ towards\ the\ feature\ averages.\ Simply\ put,\ the\ algorithm\r\n\ favors\ features\ that\ better\ polarize\ the\ classification\ of\ the\ image.\r\n\r\n\ @author\ Peter\ Olson\ mrpeterfolson@gmail.com\r\n\ @version\ 7/15/22\r\n
comment1.params=pic
comment1.target=double\ avgObjectWidth(Picture)
comment1.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ average\ object\ width\ (based\ on\ white\ pixels)\r\n\ against\ the\ width\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ average\ object\ width\ based\ on\ white\ pixels\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ width\ of\ the\ Picture\r\n
comment10.params=isA\ weightsFileName\ featureData
comment10.target=double\ changeWeights(boolean,\ java.lang.String,\ java.util.ArrayList)
comment10.text=\r\n\ Method\ that\ adjusts\ the\ weights\ based\ on\ the\ results\ of\ the\ last\ training\ image\ result.\r\n\ Note\ that\ once\ the\ program\ is\ done\ training,\ this\ method\ should\ no\ longer\ be\ run\r\n\ @param\ isA\ True\ if\ the\ image\ is\ a\ classification\ A,\ false\ if\ it\ is\ classification\ B\r\n\ @param\ weightsFileName\ The\ name\ of\ the\ text\ file\ containing\ the\ weights\r\n\ @param\ featureData\ The\ list\ of\ feature\ data\ from\ this\ instance\r\n\ @return\ double\ The\ total\ number\ of\ iterations.\ This\ is\ used\ to\ keep\ track\ of\ progress\r\n
comment11.params=weightsFileName\ featureWeightData
comment11.target=void\ updateWeights(java.lang.String,\ java.util.ArrayList)
comment11.text=\r\n\ Method\ that\ updates\ the\ weights\ text\ file\ with\ the\ new\ weight\ data\r\n\ @param\ weightsFileName\ The\ name\ of\ the\ weight\ text\ file\r\n\ @param\ featureWeightData\ The\ String\ data\ to\ write\ to\ the\ weights\ file\r\n
comment12.params=weightsFileName\ featureData
comment12.target=boolean\ makeGuess(java.lang.String,\ java.util.ArrayList)
comment12.text=\r\n\ Method\ that\ evaluates\ the\ feature\ data\ of\ this\ instance\ and\ the\ weights\ of\ previous\r\n\ instances\ to\ make\ a\ guess\ on\ whether\ this\ image\ is\ of\ the\ first\ classification\ (true)\r\n\ or\ the\ second\ classification\ (false)\r\n\ @param\ weightsFileName\ The\ file\ name\ that\ contains\ the\ weights\r\n\ @param\ featureDate\ The\ list\ of\ this\ instance's\ feature\ data\r\n\ @return\ boolean\ True\ is\ the\ program\ believes\ this\ image\ is\ the\ first\ classification,\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ false\ if\ the\ program\ believes\ this\ image\ is\ the\ second\ classification\r\n
comment13.params=weightsFileName
comment13.target=java.util.ArrayList\ getWeights(java.lang.String)
comment13.text=\r\n\ Method\ that\ grabs\ that\ weight\ pair\ values\ from\ the\ weightsFileName\ text\ file\r\n\ @param\ weightsFileName\ The\ name\ of\ the\ text\ file\ with\ the\ weight\ data\r\n\ @return\ The\ list\ of\ Pair\ of\ weights\ for\ the\ first\ and\ second\ classification.\ The\ very\ last\ Pair\ contains\ the\ iteration\ total\ (both\ entries)\r\n
comment14.params=weightsFileName
comment14.target=void\ generateWeights(java.lang.String)
comment14.text=\r\n\ Method\ that\ generates\ the\ Weights.txt\ file\ for\ the\ first\ time.\ The\ file\ generated\r\n\ will\ contain\ randomized\ weight\ scores\ for\ the\ feature\ methods\ being\ tested\ upon\r\n\ compilation.\ After\ these\ weights\ are\ generated\ by\ this\ method,\ this\ method\ should\r\n\ not\ be\ run\ again,\ unless\ the\ feature\ methods\ are\ changed,\ or\ unless\ the\ user\ wants\r\n\ to\ scrub\ the\ weight\ adjustments\ and\ start\ anew.\r\n\ @param\ weightsFileName\ The\ name\ of\ the\ file\ that\ holds\ the\ weights\ of\ the\ features\r\n
comment15.params=fileName
comment15.target=java.util.Scanner\ getScanner(java.lang.String)
comment15.text=\r\n\ Method\ that\ gets\ a\ Scanner\ object\ given\ the\ file\ name\r\n\ @param\ fileName\ The\ name\ of\ the\ file\ to\ find\r\n\ @return\ Scanner\ A\ Scanner\ object\ that\ is\ scanning\ the\ file\ found\r\n
comment16.params=filePath
comment16.target=java.io.File\ getFile(java.lang.String)
comment16.text=\r\n\ Gets\ a\ File\ based\ on\ the\ file\ name\ and\ the\ relative\ path\r\n\ \r\n\ @param\ filePath\ The\ path\ of\ the\ File\ to\ be\ found\r\n\ @return\ File\ The\ File\ found\ from\ this\ name.\ If\ not\ found,\ throws\ a\ FileNotFoundException\r\n
comment17.params=str
comment17.target=java.util.ArrayList\ getImageFiles(java.lang.String)
comment17.text=\r\n\ Gets\ a\ list\ of\ Files\ that\ have\ the\ given\ String\ in\ their\ file\ name\r\n\ \r\n\ @param\ str\ The\ String\ being\ searched\ for\ in\ each\ file\ name\r\n\ @return\ ArrayList<File>\ A\ list\ of\ files\ with\ that\ str\ in\ its\ name\r\n
comment18.params=file
comment18.target=java.lang.String\ getFileText(java.io.File)
comment18.text=\r\n\ Gets\ the\ contents\ of\ the\ File\ as\ a\ String\r\n\ \r\n\ @param\ file\ The\ file\ to\ get\ the\ text\ from\r\n\ @return\ String\ The\ contents\ of\ the\ File\ converted\ to\ a\ String\r\n
comment19.params=fileLoc\ text
comment19.target=void\ writeToFile(java.lang.String,\ java.lang.String)
comment19.text=\r\n\ Overwrite\ an\ existing\ File\r\n\ \r\n\ @param\ fileLoc\ The\ location\ of\ the\ File\ to\ write\ to\r\n\ @param\ text\ The\ text\ to\ write\ to\ the\ File\r\n
comment2.params=pic
comment2.target=double\ avgObjectHeight(Picture)
comment2.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ average\ object\ height\ (based\ on\ white\ pixels)\r\n\ against\ the\ height\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ average\ object\ height\ based\ on\ white\ pixels\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ height\ of\ the\ Picture\r\n
comment20.params=fileLoc\ text
comment20.target=void\ addToFile(java.lang.String,\ java.lang.String)
comment20.text=\r\n\ Add\ to\ an\ existing\ File\r\n\ \r\n\ @param\ fileLoc\ The\ location\ of\ the\ File\ to\ write\ to\r\n\ @param\ text\ The\ text\ to\ write\ to\ the\ File\r\n
comment21.params=str
comment21.target=void\ SOPln(java.lang.String)
comment22.params=
comment22.target=void\ SOPln()
comment23.params=str
comment23.target=void\ SOP(java.lang.String)
comment24.params=
comment24.target=void\ SOP()
comment25.params=str
comment25.target=void\ nSOPln(java.lang.String)
comment26.params=str
comment26.target=void\ nSOP(java.lang.String)
comment3.params=pic
comment3.target=double\ maxObjectWidth(Picture)
comment3.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ object\ width\ based\ on\ white\ pixels\r\n\ against\ the\ width\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ object\ width\ based\ on\ white\ pixels\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ width\ of\ the\ Picture\r\n
comment4.params=pic
comment4.target=double\ maxObjectHeight(Picture)
comment4.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ object\ height\ based\ on\ white\ pixels\r\n\ against\ the\ height\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ object\ height\ based\ on\ white\ pixels\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ height\ of\ the\ Picture\r\n
comment5.params=pic
comment5.target=double\ totalWhitePixels(Picture)
comment5.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ black\ to\ white\ pixels\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ white\ pixels\ to\ total\ pixels\r\n
comment6.params=pic
comment6.target=double\ whiteWidth(Picture)
comment6.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ largest\ width\ of\ continuous\r\n\ white\ pixels\ of\ the\ object\ detected\ against\ the\ width\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ largest\ band\ of\ white\ pixels\ in\ a\ row\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ width\ of\ the\ Picture\r\n
comment7.params=pic
comment7.target=double\ whiteHeight(Picture)
comment7.text=\r\n\ @@For\ B/W\ only\:@@\r\n\ \r\n\ Feature\ based\ on\ the\ ratio\ of\ the\ largest\ height\ of\ continuous\r\n\ white\ pixels\ of\ the\ object\ detected\ against\ the\ height\ of\ this\ picture\r\n\ \r\n\ @param\ pic\ The\ instance\ being\ looked\ at\ (the\ picture)\r\n\ @return\ double\ The\ ratio\ of\ the\ largest\ band\ of\ white\ pixels\ in\ a\ column\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ divided\ by\ the\ height\ of\ the\ Picture\r\n
comment8.params=iterations\ usingTrainingData
comment8.target=void\ runDetector(int,\ boolean)
comment8.text=\r\n\ Method\ that\ detects\ whether\ an\ image\ is\ of\ one\ category\ (called\ the\r\n\ 'first'\ category)\ or\ another\ (called\ the\ 'second'\ category).\r\n\ \r\n\ This\ method\ grabs\ images\ out\ of\ the\ images\ folder\ that\ follow\r\n\ the\ format\ "img_\#.jpg"\r\n\ \r\n\ The\ training\ images\ and\ test\ images\ can\ be\ differentiated\ by\ adjusting\r\n\ the\ 'imageBaseName'\ variable\r\n\ \r\n\ After\ each\ run,\ note\ that\ a\ few\ things\ change\ and\ have\ to\ be\ manually\ reset\r\n\ (if\ you\ are\ running\ from\ scratch\ and\ don't\ want\ to\ keep\ weights\ and\r\n\ progress)\:\r\n\ \r\n\ \ \ 1)\ Weights.txt\ \ -->\ Weights\ are\ automatically\ updated\ after\ each\ instance.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ In\ order\ to\ start\ anew,\ delete\ all\ text\ in\ this\ file\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ Note\ that\ the\ initial\ weights\ are\ set\ randomly\ when\ the\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ first\ instance\ is\ run\r\n\ \ \ 2)\ Progress.txt\ -->\ The\ success\ rate\ of\ each\ guess\ by\ the\ program\ is\ recorded\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ in\ this\ file.\ In\ order\ to\ start\ anew,\ delete\ all\ text\ in\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ file.\r\n\ \ \ 3)\ 'trained'\ folder\ -->\ In\ the\ images\ folder\ where\ the\ training\ and\ test\ images\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ are\ kept\ is\ a\ folder\ labeled\ 'trained'.\ After\ an\ image\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ is\ used,\ for\ training\ or\ testing,\ it\ is\ moved\ to\ this\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ folder.\ In\ order\ to\ start\ from\ scratch,\ move\ all\ of\ these\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ images\ back\ into\ the\ 'images'\ folder\ from\ the\ 'trained'\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ folder\r\n\ \r\n\ This\ program\ takes\ guesses\ based\ on\ a\ series\ of\ feature\ values\ on\ whether\ an\ image\r\n\ is\ of\ one\ category\ or\ another.\ It\ then\ confirms\ its\ guess\ as\ correct\ or\ incorrect\r\n\ before\ making\ adjustments.\ These\ weights\ are\ adjusted\ over\ time\ using\ averages\r\n\ of\ feature\ data\ from\ past\ and\ current\ iterations,\ holding\ weights\ for\ both\r\n\ classifications\ of\ the\ image.\r\n\ \r\n\ This\ means\ that...\r\n\ \r\n\ \ \ \ 1)\ Feature\ 'methods'\ can\ be\ added\ or\ taken\ away\ without\ 'breaking'\ anything,\ so\r\n\ \ \ \ \ \ \ long\ as\ the\ feature\ method\ works\ correctly\ and\ returns\ a\ double\ value\ between\r\n\ \ \ \ \ \ \ zero\ and\ one\r\n\ \ \ \ 2)\ Any\ images\ can\ be\ tested,\ so\ long\ as\ only\ two\ categories\ of\ images\ are\ tested\r\n\ \ \ \ \ \ \ at\ any\ given\ time.\r\n\ \ \ \ 3)\ The\ accuracy\ of\ the\ program\ is\ refined\ within\ a\ smaller\ amount\ of\ training\r\n\ \ \ \ \ \ \ images,\ in\ comparison\ to\ neural\ networks\r\n\ \ \ \ 4)\ The\ accuracy\ of\ the\ program\ is\ as\ only\ good\ as\ the\ feature\ method\ abilities\ to\r\n\ \ \ \ \ \ \ find\ distinguishing\ traits\ between\ two\ images.\ Not\ all\ feature\ method\ are\r\n\ \ \ \ \ \ \ effective\ for\ any\ two\ classifications\ of\ images\r\n\ \ \ \ 5)\ Feature\ methods\ or\ preprocessing\ methods\ that\ are\ more\ complex\ will\ quickly\r\n\ \ \ \ \ \ \ limit\ speed\ and\ the\ feasibility\ in\ using\ large\ images\r\n\ \r\n\ The\ class\ 'Picture'\ has\ a\ large\ list\ of\ preprocessing\ methods,\ some\ of\ which\ are\r\n\ designed\ to\ improve\ edge\ detections\ techniques.\ This\ class\ has\ a\ simple\ list\ of\r\n\ feature\ methods.\ In\ general,\ it\ is\ recommended\ that\ all\ image\ processing\ methods\r\n\ to\ be\ put\ in\ the\ Picture\ class\ and\ all\ feature\ methods\ to\ be\ put\ in\ this\ class.\r\n\ \r\n\ @param\ iterations\ The\ number\ of\ instances\ (images)\ to\ test\r\n\ @param\ usingTrainingData\ True\ if\ the\ program\ is\ currently\ using\ training\ data.\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ False\ if\ the\ program\ is\ currently\ using\ test\ data\r\n
comment9.params=progressFileName\ success
comment9.target=void\ updateProgress(java.lang.String,\ boolean)
comment9.text=\r\n\ Method\ that\ updates\ the\ success\ rate\ across\ multiple\ instances\ in\ the\r\n\ progress\ file\r\n\ @param\ progressFileName\ The\ name\ of\ the\ text\ file\ that\ details\ the\ success\ rate\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ across\ multiple\ instances\ evaluated\r\n\ @param\ success\ True\ if\ the\ program\ was\ successful\ on\ this\ instance,\ false\ otherwise\r\n
numComments=27
